{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack:///./src/taskpane/taskpane.js?"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global console, document, Excel, Office */\n\nOffice.onReady((info) => {\n  if (info.host === Office.HostType.Excel) {\n    // Determine if the user's version of Office supports all the Office.js APIs that are used in the tutorial.\n    if (!Office.context.requirements.isSetSupported('ExcelApi', '1.7')) {\n      console.log('Sorry. The tutorial add-in uses Excel.js APIs that are not available in your version of Office.');\n    }\n\n    // Assign event handlers and other initialization logic.\n    document.getElementById(\"create-table\").onclick = createTable;\n    document.getElementById(\"sideload-msg\").style.display = \"none\";\n    document.getElementById(\"app-body\").style.display = \"flex\";\n    document.getElementById(\"filter-table\").addEventListener('click', filterTable)//.onclick = filterTable;\n    document.getElementById(\"sort-table\").onclick = sortTable;\n    document.getElementById(\"create-chart\").onclick = createChart;\n    document.getElementById(\"freeze-header\").onclick = freezeHeader;\n    // document.getElementById(\"open-dialog\").onclick = openDialog;\n  }\n});\n\nfunction createTable() {\n  Excel.run(function (context) {\n\n      // TODO1: Queue table creation logic here.\n      var currentWorksheet = context.workbook.worksheets.getActiveWorksheet();\n      var expensesTable = currentWorksheet.tables.add(\"A1:D1\", true /*hasHeaders*/);\n      expensesTable.name = \"ExpensesTable\";\n\n      // TODO2: Queue commands to populate the table with data.\n      expensesTable.getHeaderRowRange().values =\n          [[\"Date\", \"Merchant\", \"Category\", \"Amount\"]];\n\n      expensesTable.rows.add(null /*add at the end*/, [\n          [\"1/1/2017\", \"The Phone Company\", \"Communications\", \"120\"],\n          [\"1/2/2017\", \"Northwind Electric Cars\", \"Transportation\", \"142.33\"],\n          [\"1/5/2017\", \"Best For You Organics Company\", \"Groceries\", \"27.9\"],\n          [\"1/10/2017\", \"Coho Vineyard\", \"Restaurant\", \"33\"],\n          [\"1/11/2017\", \"Bellows College\", \"Education\", \"350.1\"],\n          [\"1/15/2017\", \"Trey Research\", \"Other\", \"135\"],\n          [\"1/15/2017\", \"Best For You Organics Company\", \"Groceries\", \"97.88\"]\n      ]);\n\n      // TODO3: Queue commands to format the table.\n      expensesTable.columns.getItemAt(3).getRange().numberFormat = [['\\u20AC#,##0.00']];\n      expensesTable.getRange().format.autofitColumns();\n      expensesTable.getRange().format.autofitRows();\n            return context.sync();\n  })\n  .catch(function (error) {\n      console.log(\"Error: \" + error);\n      if (error instanceof OfficeExtension.Error) {\n          console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n      }\n  });\n}\n\nfunction filterTable() {\n  Excel.run(function (context) {\n\n      // TODO1: Queue commands to filter out all expense categories except\n      //        Groceries and Education.\n      var currentWorksheet = context.workbook.worksheets.getActiveWorksheet();\n      var expensesTable = currentWorksheet.tables.getItem('ExpensesTable');\n      var categoryFilter = expensesTable.columns.getItem('Category').filter;\n      categoryFilter.applyValuesFilter(['Education', 'Groceries']);\n\n      return context.sync();\n  })\n  .catch(function (error) {\n      console.log(\"Error: \" + error);\n      if (error instanceof OfficeExtension.Error) {\n          console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n      }\n  });\n}\n\nfunction sortTable() {\n  Excel.run(function(context){\n    var currentWorksheet = context.workbook.worksheets.getActiveWorksheet();\n    var expensesTable = currentWorksheet.tables.getItem('ExpensesTable');\n    var sortFields = [\n        {\n            key: 1,            // Merchant column\n            ascending: false,\n        }\n    ];\n\n    expensesTable.sort.apply(sortFields);\n    return context.sync()\n  })\n  .catch(function (error) {\n      console.log(\"Error: \" + error);\n      if (error instanceof OfficeExtension.Error) {\n          console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n      }\n  });\n}\n\nfunction createChart() {\n  Excel.run(function(context){\n    var currentWorksheet = context.workbook.worksheets.getActiveWorksheet();\n    var expensesTable = currentWorksheet.tables.getItem('ExpensesTable');\n    var dataRange = expensesTable.getDataBodyRange();\n\n    var chart = currentWorksheet.charts.add('ColumnClustered', dataRange, 'Auto');\n    chart.setPosition(\"A15\", \"F30\");\n    chart.title.text = \"Expenses\";\n    chart.legend.position = \"Left\";\n    chart.legend.format.fill.setSolidColor(\"white\");\n    chart.dataLabels.format.font.size = 12;\n    chart.dataLabels.format.font.color = \"red\";\n    chart.series.getItemAt(0).name = 'Value in \\u20AC';\n    return context.sync()\n  })\n  .catch(function(error){\n    console.log(\"Error: \" + error);\n    if(error instanceof OfficeExtension.Error) {\n      console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n  })\n}\n\nfunction freezeHeader() {\n  Excel.run(function (context) {\n\n      // TODO1: Queue commands to keep the header visible when the user scrolls.\n      var currentWorksheet = context.workbook.worksheets.getActiveWorksheet();\n      currentWorksheet.freezePanes.freezeRows(1);\n      return context.sync();\n  })\n  .catch(function (error) {\n      console.log(\"Error: \" + error);\n      if (error instanceof OfficeExtension.Error) {\n          console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n      }\n  });\n}\n\n// var dialog = null;\n\n// function openDialog() {\n//   // TODO1: Call the Office Common API that opens a dialog\n//   Office.context.ui.displayDialogAsync(\n//     'https://localhost:3000/popup.html',\n//     {height: 45, width: 55},\n\n//     // TODO2: Add callback parameter.\n//     function (result) {\n//       dialog = result.value;\n//       dialog.addEventHandler(Office.EventType.DialogMessageReceived, processMessage);\n//     }\n// );\n// }\n\n// function processMessage(arg) {\n//   document.getElementById(\"user-name\").innerHTML = arg.message;\n//   dialog.close();\n// }\n\n\n\n\n"],"names":["createTable","Excel","run","context","expensesTable","workbook","worksheets","getActiveWorksheet","tables","add","name","getHeaderRowRange","values","rows","columns","getItemAt","getRange","numberFormat","format","autofitColumns","autofitRows","sync","catch","error","console","log","OfficeExtension","Error","JSON","stringify","debugInfo","filterTable","getItem","filter","applyValuesFilter","sortTable","sort","apply","key","ascending","createChart","currentWorksheet","dataRange","getDataBodyRange","chart","charts","setPosition","title","text","legend","position","fill","setSolidColor","dataLabels","font","size","color","series","freezeHeader","freezePanes","freezeRows","Office","onReady","info","host","HostType","requirements","isSetSupported","document","getElementById","onclick","style","display","addEventListener"],"sourceRoot":""}